
#include "header.ibu"
#include "std/header.ibu"
#include "linux-syscall/header.ibu"

func initializer(p *Parser, lhs *Node) *Node {
    let nodes *Vec = new_vec(10);

    if lhs.ty.kind != TY_ARRAY && lhs.ty.kind != TY_STRUCT {
        print_error(p.tokens, "unexpected initializer");
    }

    parser_skip(p, "{");

    if strcmp(p.tokens.lit, "}") {
        let expr *Node = new_node(ND_MEMZERO);
        expr.lhs = lhs;
        vec_append(nodes, expr);
    } else if lhs.ty.kind == TY_ARRAY {
        let i i32 = 0;
        while i < lhs.ty.array_len {
            let deref_lhs *Node = new_node(ND_DEREF);
            deref_lhs.lhs = new_binop(ND_ADD, lhs, new_node_num(lhs.ty.pointer_to.size * i));
            add_type(p, deref_lhs);

            if strcmp(p.tokens.lit, "{") {
                vec_append(nodes, initializer(p, deref_lhs));
            } else {
                vec_append(nodes, new_binop(ND_ASSIGN, deref_lhs, parse_expr(p)));
            }

            i++;

            if i < lhs.ty.array_len {
                parser_skip(p, ",");
            }
        }
    } else if lhs.ty.kind == TY_STRUCT {
        let i i32 = 0;
        while i < lhs.ty.members.len {
            let struct_member *Member = vec_get(lhs.ty.members, i);

            let deref_lhs *Node = new_struct_access_node(ND_MEMBER_ACCESS, lhs, struct_member.offset, struct_member.ty);

            if strcmp(p.tokens.lit, "{") {
                vec_append(nodes, initializer(p, deref_lhs));
            } else {
                vec_append(nodes, new_binop(ND_ASSIGN, deref_lhs, parse_expr(p)));
            }

            i++;

            if i < lhs.ty.members.len {
                parser_skip(p, ",");
            }
        }
    } else {}

    parser_skip(p, "}");

    let node *Node = new_node(ND_BLOCK);
    node.body = nodes;
    add_type(p, node);

    return node;
}

func parse_let(p *Parser) *Node {
    let node *Node;

    parser_skip(p, "let");

    let var_name_tok *Token = p.tokens;
    parser_next(p);

    let var_ty *Type = parse_ty(p);
    let obj *Object = new_local_object(p, OBJ_VAR, var_name_tok.lit, var_ty, var_name_tok, false);

    if strcmp(p.tokens.lit, "=") {
        parser_skip(p, "=");

        let node_var *Node = new_node(ND_VAR);
        node_var.obj = obj;
        add_type(p, node_var);

        if strcmp(p.tokens.lit, "{") {
            node = initializer(p, node_var);
            parser_skip(p, ";");
        } else {
            node = new_binop(ND_ASSIGN, node_var, parse_expr_stmt(p));
        }

        return node;
    } else {
        parser_skip(p, ";");
        return nil;
    }
}

func parse_goto(p *Parser) *Node {
    parser_skip(p, "goto");

    let label_name *u8 = p.tokens.lit;
    parser_next(p);

    parser_skip(p, ";");

    let node *Node = new_node(ND_GOTO);
    node.label_name = label_name;
    return node;
}

func parse_if(p *Parser) *Node {
    parser_skip(p, "if");

    let node *Node = new_node(ND_IF);
    node.cond = parse_expr(p);
    node.then_block = parse_block(p);

    if strcmp(p.tokens.lit, "else") {
        parser_next(p);
        node.else_block = parse_stmt(p);
    } else {
        node.else_block = new_node(ND_EMPTY);
    }

    return node;
}

func parse_return(p *Parser) *Node {
    parser_skip(p, "return");
    if strcmp(p.tokens.lit, ";") {
        parser_skip(p, ";");
        return new_node(ND_RETURN);
    }
    let node *Node = new_node(ND_RETURN);
    node.lhs = parse_expr_stmt(p);
    return node;
}

func parse_for(p *Parser) *Node {
    parser_skip(p, "for");
    let node *Node = new_node(ND_FOR);

    if !strcmp(p.tokens.lit, "{") {
        enter_scope(p);
        if strcmp(p.tokens.lit, ";") {
            node.init = nil;
            parser_skip(p, ";");
        } else if strcmp(p.tokens.lit, "let") {
            node.init = parse_let(p);
        } else {
            node.init = parse_expr_stmt(p);
        }

        if strcmp(p.tokens.lit, ";") {
            node.cond = nil;
        } else {
            node.cond = parse_expr(p);
        }
        parser_skip(p, ";");

        if strcmp(p.tokens.lit, "{") {
            node.inc = nil;
        } else {
            node.inc = parse_expr(p);
        }
    } else {
        node.cond = node_true();
    }

    node.then_block = parse_block(p);

    leave_scope(p);

    return node;
}

func parse_while(p *Parser) *Node {
    parser_skip(p, "while");
    let node *Node = new_node(ND_FOR);

    if !strcmp(p.tokens.lit, "{") {
        node.cond = parse_expr(p);
    } else {
        node.cond = node_true();
    }

    node.then_block = parse_block(p);
    return node;
}

func parse_label(p *Parser) *Node {
    let node *Node = new_node(ND_LABEL);
    node.label_name = p.tokens.lit;

    parser_next(p);
    parser_skip(p, ":");

    return node;
}

func parse_switch(p *Parser) *Node {
    if p.current_switch != nil {
        print_error(p.tokens, "nested switch statements are not supported yet");
    }

    let switch_tok *Token = p.tokens;

    parser_skip(p, "switch");
    let node *Node = new_node(ND_SWITCH);

    p.current_switch = node;

    node.cond = parse_expr(p);

    node.cases = new_vec(4);

    node.then_block = parse_block(p);

    if node.cases.len == 0 {
        print_error(switch_tok, "switch statement must have at least one case");
    }

    p.current_switch = nil;

    return node;
}

func parse_case(p *Parser) *Node {
    if p.current_switch == nil {
        print_error(p.tokens, "case outside of switch");
    }

    parser_skip(p, "case");
    let node *Node = new_node(ND_CASE);
    let save_cond_tok *Token = p.tokens;
    node.cond = parse_expr(p);
    if node.cond.kind != ND_NUM {
        print_error(save_cond_tok, "case value must be a integer constant");
    }

    parser_skip(p, ":");

    vec_append(p.current_switch.cases, node);

    return node;
}

func parse_stmt(p *Parser) *Node {
    if strcmp(p.tokens.lit, "switch") {
        return parse_switch(p);
    }
    if strcmp(p.tokens.lit, "case") {
        return parse_case(p);
    }
    if strcmp(p.tokens.lit, "let") {
        return parse_let(p);
    }
    if strcmp(p.tokens.lit, "goto") {
        return parse_goto(p);
    }
    if strcmp(p.tokens.lit, "if") {
        return parse_if(p);
    }
    if strcmp(p.tokens.lit, "for") {
        return parse_for(p);
    }
    if strcmp(p.tokens.lit, "while") {
        return parse_while(p);
    }
    if strcmp(p.tokens.lit, "return") {
        return parse_return(p);
    }
    if strcmp(p.tokens.lit, "{") {
        return parse_block(p);
    }
    if p.tokens.kind != TK_EOF {
        if strcmp(p.tokens.next.lit, ":") {
            return parse_label(p);
        }
    }

    return parse_expr_stmt(p);
}
