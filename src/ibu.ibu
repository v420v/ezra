
#include "util/header.ibu"
#include "linux-syscall/header.ibu"
#include "tokenizer/header.ibu"
#include "parser/header.ibu"
#include "codegen/header.ibu"
#include "preprocessor/header.ibu"

func main(argc i32, argv **u8) i32 {
    if argc != 2 {
        printf("usage\n\tibuc <filename>.ibu\n");
        exit(0);
    }

    let file_name *u8 = argv[1];

    let fd i32 = 0;
    if str_equal(file_name, "-") {
        fd = STDIN;
    } else {
        fd = open(file_name, 0, 420);
        if fd < 0 {
            eprintf("\033[1m\033[31merror\033[0m: opening file %s\n", file_name);
            exit(1);
        }
    }

    let stat Stat = {};
    let fstat_result i64 = fstat(fd, &stat);
    if fstat_result < 0 {
        eprintf("error: fstat failed\n");
        exit(1);
    }

    let program *u8 = alloc(stat.st_size+1);
    if program == nil {
        eprintf("memory allocation failed\n");
        exit(1);
    }
    read(fd, program, stat.st_size);
    close(fd);
    program[stat.st_size] = '\0';

    let t *Tokenizer = new_tokenizer(file_name, program);
    let tokens *Token = tokenize(t);

    let preprocessor *Preprocessor = new_preprocessor();
    preprocess(tokens, preprocessor);

    let p *Parser = new_parser(tokens);
    parse(p);

    let g *Gen = new_gen();
    gen(g, p.globals);

    return 0;
}

